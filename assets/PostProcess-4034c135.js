var n=Object.defineProperty;var m=(t,e,r)=>e in t?n(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r;var s=(t,e,r)=>(m(t,typeof e!="symbol"?e+"":e,r),r);import{b as E,c as R}from"./webgl-ec7981e3.js";class B{constructor(e,r,i){s(this,"gl");s(this,"canvas");s(this,"framebuffer");s(this,"vertexBuffer");s(this,"textureBuffer");s(this,"program");s(this,"startTime");this.gl=e,this.canvas=e.canvas;const a=this.canvas.width,f=this.canvas.height,o=e.createTexture();e.bindTexture(e.TEXTURE_2D,o),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,a,f,0,e.RGBA,e.UNSIGNED_BYTE,null);const u=E(e,a,f,o),[h,T]=A(e);this.framebuffer=u,this.vertexBuffer=h,this.textureBuffer=T,this.startTime=Date.now(),this.configureShader(r,i)}configureShader(e,r){const i=this.gl;this.program&&this.program.dispose(),this.program=R(i,e,r,[],[])}validateSize(){const{width:e,height:r}=this.canvas;this.framebuffer.resize(e,r)}drawToFramebuffer(e){this.validateSize(),this.framebuffer.use(e)}draw(e){const r=this.gl,{width:i,height:a}=this.canvas;this.program.use(),r.enableVertexAttribArray(this.program.attributes.aVertexPosition),r.bindBuffer(r.ARRAY_BUFFER,this.vertexBuffer),r.vertexAttribPointer(this.program.attributes.aVertexPosition,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(this.program.attributes.aVertexTextureCoords),r.bindBuffer(r.ARRAY_BUFFER,this.textureBuffer),r.vertexAttribPointer(this.program.attributes.aVertexTextureCoords,2,r.FLOAT,!1,0,0),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,this.framebuffer.texture),this.program.setUniform("uSampler","sampler2D",0),this.program.uniforms.uTime&&this.program.setUniform("uTime","float",(Date.now()-this.startTime)/1e3),this.program.uniforms.uInverseTextureSize&&this.program.setUniform("uInverseTextureSize","vec2",[1/i,1/a]),e==null||e(),r.drawArrays(r.TRIANGLES,0,6)}dispose(){this.program.dispose(),this.framebuffer.dispose(),this.gl.deleteBuffer(this.vertexBuffer),this.gl.deleteBuffer(this.textureBuffer)}}const A=t=>{const e=[-1,-1,1,-1,-1,1,-1,1,1,-1,1,1],r=[0,0,1,0,0,1,0,1,1,0,1,1],i=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,new Float32Array(e),t.STATIC_DRAW);const a=t.createBuffer();return t.bindBuffer(t.ARRAY_BUFFER,a),t.bufferData(t.ARRAY_BUFFER,new Float32Array(r),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),[i,a]};export{B as P};
